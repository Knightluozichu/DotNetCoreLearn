@page "/admin/products"
@page "/admin"
@inherits OwningComponentBase<IStoreRepository>

<table class="table table-sm table-striped table-bordered">
    <thead>
        <tr>
            <th>ID</th><th>商品名</th><th>类型</th><th>价格</th><td></td>
        </tr>
    </thead>
    <tbody>
        @if (ProductData?.Count() > 0)
        {
            @foreach (var p in ProductData)
            {
                <tr>
                    <td>@p.ProductID</td>
                    <td>@p.Name</td>
                    <td>@p.Category</td>
                    <td>@p.Price.ToString("c")</td>
                    <td>
                        <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(p.ProductID)">
                            细节
                        </NavLink>
                        <NavLink class="btn btn-info btn-sm" href="@GetEditUrl(p.ProductID)">
                            编辑
                        </NavLink>
                        <button class="btn btn-danger btn-sm" @onclick="(e => DeleteProduct(p))">删除</button>
                    </td>
                </tr>
            }
        }else
        {
          <tr>
              <td colspan="5" class="text-center">没有商品</td>
          </tr>  
        }
    </tbody>
</table>

<NavLink class="btn btn-primary" href="/admin/products/create">新建</NavLink>

@code{
    public IStoreRepository Repository=>Service;
    public IEnumerable<Product> ProductData { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        ProductData = await Repository.Products.ToListAsync();
    }

    public async Task DeleteProduct(Product p)
    {
        Repository.DeleteProduct(p);
        await UpdateData();
    }

    public string GetDetailsUrl(long id) => $"/admin/products/details/{id}";
    public string GetEditUrl(long id) => $"/admin/products/edit/{id}";
}